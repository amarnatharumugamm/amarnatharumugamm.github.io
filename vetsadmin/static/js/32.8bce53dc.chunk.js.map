{"version":3,"sources":["Components/RejectedList.js"],"names":["RejectedList","dispatch","useDispatch","useEffect","rejecteddoctorlist","rejectedlist","useSelector","payload","className","Array","isArray","length","map","item","src","photo","alt","name","doc_reg_no","designation","mobile","style","display","justifyContent","ph_verified","createdAt","district","approval_status","substring","toUpperCase","class","onChange","event","target","value","approvedoctor","id","status","onClick","colspan","textAlign"],"mappings":"2GAAA,2CAuJeA,UAhJf,WACE,IAAMC,EAAWC,cACjBC,qBAAU,WACRF,EAASG,iBACR,IAEH,IAAIC,EAAeC,aACjB,qBAAGF,mBAA4CG,WAGjD,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,mBACA,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,sCACA,8CACA,6CACA,4CACA,mDACA,4CACA,0CACA,wCACA,2CAGJ,+BACGC,MAAMC,QAAQL,IAAiBA,EAAaM,OAAS,EACpDN,EAAaO,KAAI,SAACC,GAChB,OACE,4BACE,4BACE,yBAAKC,IAAKD,EAAKE,MAAOP,UAAU,OAAOQ,IAAI,SAC1CH,EAAKI,MAER,gCAAMJ,EAAKK,WAAX,KACA,gCAAML,EAAKM,YAAX,KACA,gCAAMN,EAAKO,OAAX,KACA,wBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,WAGG,GAApBV,EAAKW,YAAuB,KAAO,MAAO,KAG7C,gCAAMX,EAAKY,WACX,gCAAMZ,EAAKa,SAAX,KACA,4BACE,2BAAOlB,UAAU,+BACdK,EAAKc,gBACHC,UAAU,EAAG,GACbC,cACDhB,EAAKc,gBAAgBC,UACnB,EACAf,EAAKc,gBAAgBhB,UAI7B,4BACE,4BACEmB,MAAM,gBACNC,SAAU,SAACC,GACT,OAAQA,EAAMC,OAAOC,OACnB,IAAK,WACHjC,EACEkC,YAAc,CACZC,GAAIvB,EAAKuB,GAAK,GACdC,OAAQ,cAGZ,MACF,IAAK,UACHpC,EACEkC,YAAc,CACZC,GAAIvB,EAAKuB,GAAK,GACdC,OAAQ,aAOhBL,EAAMC,OAAOC,MAAQ,kBAGvB,4BAAQA,MAAM,iBAAd,iBAGA,4BACEI,QAAS,kBACPrC,EACEkC,YAAc,CACZC,GAAIvB,EAAKuB,GACTC,OAAQ,eAIdH,MAAM,YATR,WAcA,4BACEA,MAAM,UACNI,QAAS,kBACPrC,EACEkC,YAAc,CACZC,GAAIvB,EAAKuB,GACTC,OAAQ,eANhB,iBAmBV,4BACE,wBAAIE,QAAQ,IAAIlB,MAAO,CAAEmB,UAAW,WAApC","file":"static/js/32.8bce53dc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Switch } from \"react-router-dom\";\n\nimport { rejecteddoctorlist, approvedoctor } from \"../reduxx/actions/actions\";\n\nfunction RejectedList() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(rejecteddoctorlist());\n  }, []);\n\n  var rejectedlist = useSelector(\n    ({ rejecteddoctorlist }) => rejecteddoctorlist.payload\n  );\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 grid-margin\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\"> Rejected List </h4>\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th> User </th>\n                    <th> Doctor Regno </th>\n                    <th> Designation </th>\n                    <th>Phone number</th>\n                    <th>Phone number status</th>\n                    <th> Joined Date</th>\n                    <th> Location </th>\n                    <th> Status </th>\n                    <th> Actions </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(rejectedlist) && rejectedlist.length > 0 ? (\n                    rejectedlist.map((item) => {\n                      return (\n                        <tr>\n                          <td>\n                            <img src={item.photo} className=\"mr-2\" alt=\"face\" />\n                            {item.name}\n                          </td>\n                          <td> {item.doc_reg_no} </td>\n                          <td> {item.designation} </td>\n                          <td> {item.mobile} </td>\n                          <td\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"center\",\n                            }}\n                          >\n                            {item.ph_verified == false ? \"No\" : \"Yes\"}{\" \"}\n                          </td>\n\n                          <td> {item.createdAt}</td>\n                          <td> {item.district} </td>\n                          <td>\n                            <label className=\"badge badge-gradient-danger\">\n                              {item.approval_status\n                                .substring(0, 1)\n                                .toUpperCase() +\n                                item.approval_status.substring(\n                                  1,\n                                  item.approval_status.length\n                                )}\n                            </label>\n                          </td>\n                          <td>\n                            <select\n                              class=\"custom-select\"\n                              onChange={(event) => {\n                                switch (event.target.value) {\n                                  case \"approved\":\n                                    dispatch(\n                                      approvedoctor({\n                                        id: item.id + \"\",\n                                        status: \"approved\",\n                                      })\n                                    );\n                                    break;\n                                  case \"pending\":\n                                    dispatch(\n                                      approvedoctor({\n                                        id: item.id + \"\",\n                                        status: \"pending\",\n                                      })\n                                    );\n                                    break;\n                                  default:\n                                    break;\n                                }\n                                event.target.value = \"update_status\";\n                              }}\n                            >\n                              <option value=\"update_status\">\n                                Update Status\n                              </option>\n                              <option\n                                onClick={() =>\n                                  dispatch(\n                                    approvedoctor({\n                                      id: item.id,\n                                      status: \"approved\",\n                                    })\n                                  )\n                                }\n                                value=\"approved\"\n                              >\n                                Approve\n                              </option>\n\n                              <option\n                                value=\"pending\"\n                                onClick={() =>\n                                  dispatch(\n                                    approvedoctor({\n                                      id: item.id,\n                                      status: \"pending\",\n                                    })\n                                  )\n                                }\n                              >\n                                Pending\n                              </option>\n                            </select>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colspan=\"7\" style={{ textAlign: \"center\" }}>\n                        No Data Found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default RejectedList;\n"],"sourceRoot":""}