{"version":3,"sources":["../node_modules/react-bootstrap/esm/Alert.js","Components/DrugCalculator/AddDrug.js"],"names":["_excluded","DivStyledAsH4","displayName","AlertHeading","Component","AlertLink","defaultProps","show","transition","closeLabel","Alert","forwardRef","uncontrolledProps","ref","_useUncontrolled","bsPrefix","className","children","variant","onClose","dismissible","props","prefix","handleClose","e","Transition","alert","createElement","role","undefined","onClick","label","unmountOnExit","in","Link","Heading","doselist","localStorage","getItem","availablelist","availableList","JSON","parse","doseList","DOSE","join","split","AVAILABLE","AddDrug","dispatch","useDispatch","useState","name","action","note","drugindex","setDrugindex","species","one_v","one_m","sc","oral","dosedata","setDosedata","brand","type","trade_name","presentative","available","setAvailable","handledoseChange","target","value","handledrugChange","handleavailableChange","useEffect","listdose","id","availbilityList","listdrugindex","druglist","useSelector","payload","setShow","availability","setAvailability","adddose","handleAvailabilityClose","addavailbility","onSubmit","preventDefault","adddrugindex","dose","Group","htmlFor","Control","onChange","placeholder","required","style","display","justifyContent","alignSelf","Array","isArray","length","map","i","cursor","deletedose","colSpan","textAlign","fontWeight","onHide","Header","closeButton","Title","Body","Footer","availbilityDelete","drug","deletedrugindex","drugdose"],"mappings":"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","file":"static/js/19.31b18688.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"show\", \"closeLabel\", \"className\", \"children\", \"variant\", \"onClose\", \"dismissible\", \"transition\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport SafeAnchor from './SafeAnchor';\nvar DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nvar AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nvar AlertLink = createWithBsPrefix('alert-link', {\n  Component: SafeAnchor\n});\nvar defaultProps = {\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nvar Alert =\n/*#__PURE__*/\nReact.forwardRef(function (uncontrolledProps, ref) {\n  var _useUncontrolled = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  }),\n      bsPrefix = _useUncontrolled.bsPrefix,\n      show = _useUncontrolled.show,\n      closeLabel = _useUncontrolled.closeLabel,\n      className = _useUncontrolled.className,\n      children = _useUncontrolled.children,\n      variant = _useUncontrolled.variant,\n      onClose = _useUncontrolled.onClose,\n      dismissible = _useUncontrolled.dismissible,\n      transition = _useUncontrolled.transition,\n      props = _objectWithoutPropertiesLoose(_useUncontrolled, _excluded);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  var handleClose = useEventCallback(function (e) {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  var Transition = transition === true ? Fade : transition;\n  var alert =\n  /*#__PURE__*/\n  React.createElement(\"div\", _extends({\n    role: \"alert\"\n  }, !Transition ? props : undefined, {\n    ref: ref,\n    className: classNames(className, prefix, variant && prefix + \"-\" + variant, dismissible && prefix + \"-dismissible\")\n  }), dismissible &&\n  /*#__PURE__*/\n  React.createElement(CloseButton, {\n    onClick: handleClose,\n    label: closeLabel\n  }), children);\n  if (!Transition) return show ? alert : null;\n  return (\n    /*#__PURE__*/\n    React.createElement(Transition, _extends({\n      unmountOnExit: true\n    }, props, {\n      ref: undefined,\n      in: show\n    }), alert)\n  );\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nAlert.Link = AlertLink;\nAlert.Heading = AlertHeading;\nexport default Alert;","import React, { useState, useEffect } from \"react\";\nimport {\n  Form,\n  ProgressBar,\n  Modal,\n  Button,\n  Alert,\n  Badge,\n} from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  adddose,\n  listdose,\n  addavailbility,\n  availbilityList,\n  adddrugindex,\n  listdrugindex,\n  deletedrugindex,\n  deletedose,\n  availbilityDelete,\n} from \"../../reduxx/actions/actions\";\n\nconst doselist = localStorage.getItem(\"Dose\");\nconst availablelist = localStorage.getItem(\"AvailableDose\");\n\nlet availableList = JSON.parse(availablelist);\nlet doseList = JSON.parse(doselist);\n\nconst DOSE =\n  doseList == null && doseList == undefined\n    ? []\n    : doseList.join(\",\").split(\",\");\nconst AVAILABLE =\n  availableList == null && availableList == undefined\n    ? []\n    : availableList.join(\",\").split(\",\");\n\nfunction AddDrug() {\n  const dispatch = useDispatch();\n  const [link, setLink] = useState(\"\");\n  const [drugindex, setDrugindex] = useState({\n    name: \"\",\n    action: \"\",\n    note: \"\",\n  });\n  const [dosedata, setDosedata] = useState({\n    species: \"\",\n    one_v: \"\",\n    one_m: \"\",\n    sc: \"\",\n    oral: \"\",\n  });\n  const [available, setAvailable] = useState({\n    brand: \"\",\n    type: \"\",\n    trade_name: \"\",\n    presentative: \"\",\n  });\n  const handledoseChange = (e) => {\n    setDosedata({ ...dosedata, [e.target.name]: e.target.value });\n  };\n  const handledrugChange = (e) => {\n    setDrugindex({ ...drugindex, [e.target.name]: e.target.value });\n  };\n\n  const handleavailableChange = (e) => {\n    setAvailable({ ...available, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(\n      adddrugindex({\n        ...drugindex,\n        dose: DOSE,\n        availability: AVAILABLE,\n      })\n    );\n  };\n  useEffect(() => {\n    dispatch(listdose({ id: DOSE }));\n  }, []);\n  useEffect(() => {\n    dispatch(availbilityList({ id: AVAILABLE }));\n  }, []);\n\n  useEffect(() => {\n    dispatch(listdrugindex());\n  }, []);\n  const druglist = useSelector(({ listdrugindex }) => listdrugindex.payload);\n  const doselist = useSelector(({ listdose }) => listdose.payload);\n  const availablelist = useSelector(\n    ({ availbilityList }) => availbilityList.payload\n  );\n  const [show, setShow] = useState(false);\n  const [availability, setAvailability] = useState(false);\n\n  const handleClose = () => {\n    setShow(false);\n    dispatch(adddose(dosedata));\n  };\n  const handleAvailabilityClose = () => {\n    setAvailability(false);\n    dispatch(addavailbility(available));\n  };\n  const handleShow = () => setShow(true);\n  const handleAvailability = () => setAvailability(true);\n  return (\n    <div>\n      <div className=\"col-12 grid-margin stretch-card\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\">Drug Calculator</h4>\n            <p className=\"card-description\"> Add </p>\n            <form className=\"forms-sample\" onSubmit={handleSubmit}>\n              <Form.Group>\n                <label htmlFor=\"exampleInputName1\" className=\"mt-0\">\n                  Name\n                </label>\n                <Form.Control\n                  type=\"text\"\n                  className=\"form-control mt-2 mb-3\"\n                  id=\"exampleInputName1\"\n                  name=\"name\"\n                  onChange={handledrugChange}\n                  placeholder=\"Enter Name\"\n                  required\n                />\n                <label htmlFor=\"exampleInputName1\" className=\"mt-0\">\n                  Action\n                </label>\n                <Form.Control\n                  type=\"text\"\n                  className=\"form-control mt-2 mb-3\"\n                  id=\"exampleInputName1\"\n                  name=\"action\"\n                  onChange={handledrugChange}\n                  placeholder=\"Enter Action\"\n                  required\n                />\n                <br />\n                <div\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                  <h5\n                    style={{ display: \"flex\", alignSelf: \"center\" }}\n                    className=\"mt-4\"\n                  >\n                    Dose List\n                  </h5>\n                  <Button variant=\"primary\" onClick={handleShow}>\n                    Add Dose\n                  </Button>\n                </div>\n\n                <table className=\"table mt-2\">\n                  <thead>\n                    <tr>\n                      <th> S No </th>\n                      <th> Species </th>\n                      <th> One M </th>\n                      <th> One V </th>\n                      <th> Oral </th>\n                      <th> SC </th>\n                      <th> Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.isArray(doselist) && doselist.length > 0 ? (\n                      doselist.map((dose, i) => {\n                        return (\n                          <tr>\n                            <td> {i + 1}</td>\n                            <td> {dose.species} </td>\n                            <td> {dose.one_m} </td>\n                            <td> {dose.one_v} </td>\n                            <td> {dose.oral} </td>\n                            <td> {dose.sc} </td>\n                            <td>\n                              <span\n                                className=\"badge badge-danger\"\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => {\n                                  dispatch(deletedose({ id: dose.id + \"\" }));\n                                }}\n                              >\n                                Delete\n                              </span>\n                            </td>\n                          </tr>\n                        );\n                      })\n                    ) : (\n                      <tr>\n                        <td\n                          colSpan={8}\n                          style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                        >\n                          <Alert className=\"p-3\" variant=\"danger\">\n                            No Dose Found\n                          </Alert>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n\n                <Modal show={show} onHide={handleClose}>\n                  <Modal.Header closeButton>\n                    <Modal.Title>Add Dose</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"species\"\n                      onChange={handledoseChange}\n                      placeholder=\"Enter Species\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"one_v\"\n                      onChange={handledoseChange}\n                      placeholder=\"Enter One_v\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"one_m\"\n                      onChange={handledoseChange}\n                      placeholder=\"Enter one_m\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"sc\"\n                      onChange={handledoseChange}\n                      placeholder=\"Enter sc\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"oral\"\n                      onChange={handledoseChange}\n                      placeholder=\"Enter Oral\"\n                      required\n                    />\n                  </Modal.Body>\n                  <Modal.Footer\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\n                  >\n                    <Button variant=\"primary\" onClick={handleClose}>\n                      Add Dose\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n\n                <br />\n\n                <div\n                  style={{ display: \"flex\", justifyContent: \"space-between\" }}\n                >\n                  <h5\n                    style={{ display: \"flex\", alignSelf: \"center\" }}\n                    className=\"mt-4\"\n                  >\n                    Availability List\n                  </h5>\n                  <Button variant=\"primary\" onClick={handleAvailability}>\n                    Add Availability\n                  </Button>\n                </div>\n\n                <br />\n                <Modal show={availability} onHide={handleAvailabilityClose}>\n                  <Modal.Header closeButton>\n                    <Modal.Title>Add Availability</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body>\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"brand\"\n                      onChange={handleavailableChange}\n                      placeholder=\"Enter Brand\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"type\"\n                      onChange={handleavailableChange}\n                      placeholder=\"Enter Type\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"trade_name\"\n                      onChange={handleavailableChange}\n                      placeholder=\"Enter Trade Name\"\n                      required\n                    />\n                    <Form.Control\n                      type=\"text\"\n                      className=\"form-control mt-2\"\n                      id=\"exampleInputName1\"\n                      name=\"presentative\"\n                      onChange={handleavailableChange}\n                      placeholder=\"Enter Presentative\"\n                      required\n                    />\n                  </Modal.Body>\n                  <Modal.Footer\n                    style={{ display: \"flex\", justifyContent: \"center\" }}\n                  >\n                    <Button variant=\"primary\" onClick={handleAvailabilityClose}>\n                      Add Availability\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n                <h6 className=\"mt-4\">Availability List</h6>\n                <table className=\"table mt-2\">\n                  <thead>\n                    <tr>\n                      <th> S No </th>\n                      <th> Brand </th>\n                      <th> Presentative </th>\n                      <th> Trade Name </th>\n                      <th> Type</th>\n                      <th> Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.isArray(availablelist) &&\n                    availablelist.length > 0 ? (\n                      availablelist.map((dose, i) => {\n                        return (\n                          <tr>\n                            <td> {i + 1}</td>\n                            <td> {dose.brand} </td>\n                            <td> {dose.presentative} </td>\n                            <td> {dose.trade_name} </td>\n                            <td> {dose.type} </td>\n                            <td>\n                              <span\n                                className=\"badge badge-danger\"\n                                style={{ cursor: \"pointer\" }}\n                                onClick={() => {\n                                  dispatch(\n                                    availbilityDelete({\n                                      id: dose.id + \"\",\n                                    })\n                                  );\n                                }}\n                              >\n                                Delete\n                              </span>\n                            </td>\n                          </tr>\n                        );\n                      })\n                    ) : (\n                      <tr>\n                        <td\n                          colSpan={8}\n                          style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                        >\n                          <Alert className=\"p-3\" variant=\"danger\">\n                            No Availability Found\n                          </Alert>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n                <br />\n                <label htmlFor=\"exampleInputName2\" className=\"mt-4\">\n                  Note\n                </label>\n                <Form.Control\n                  type=\"text\"\n                  className=\"form-control mt-2\"\n                  id=\"exampleInputName2\"\n                  name=\"note\"\n                  onChange={handledrugChange}\n                  placeholder=\"Enter Note\"\n                  required\n                />\n              </Form.Group>\n\n              <button type=\"submit\" className=\"btn btn-gradient-primary mr-2\">\n                Submit\n              </button>\n            </form>\n            <p className=\"card-description mt-3\"> List </p>\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th> S No </th>\n                    <th> Name </th>\n                    <th> Action </th>\n                    <th> Note </th>\n                    <th> Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(druglist) && druglist.length > 0 ? (\n                    druglist.map((drug, i) => {\n                      return (\n                        <tr>\n                          <td> {i + 1}</td>\n                          <td> {drug.name} </td>\n                          <td> {drug.action} </td>\n                          <td> {drug.note} </td>\n                          <td>\n                            <span\n                              className=\"badge badge-danger\"\n                              style={{ cursor: \"pointer\" }}\n                              onClick={() => {\n                                dispatch(deletedrugindex({ id: drug.id + \"\" }));\n                              }}\n                            >\n                              Delete\n                            </span>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td\n                        colSpan={5}\n                        style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                      >\n                        <Alert className=\"p-3\" variant=\"danger\">\n                          No Data Found\n                        </Alert>\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n              </table>\n              {Array.isArray(druglist) && druglist.length > 0 ? (\n                <table className=\"table\">\n                  <thead>\n                    <tr>\n                      <th> S No </th>\n                      <th> Species</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.isArray(druglist) ? (\n                      druglist.map((drug, i) => {\n                        return (\n                          <tr>\n                            <td>{i + 1}</td>\n                            <td>\n                              {drug.dose.map((drugdose) => {\n                                return <td> {drugdose.species}</td>;\n                              })}\n                            </td>\n                          </tr>\n                        );\n                      })\n                    ) : (\n                      <tr>\n                        <td\n                          colSpan={5}\n                          style={{ textAlign: \"center\", fontWeight: \"bold\" }}\n                        >\n                          <Alert className=\"p-3\" variant=\"danger\">\n                            No Drug Found\n                          </Alert>\n                        </td>\n                      </tr>\n                    )}\n                  </tbody>\n                </table>\n              ) : (\n                false\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddDrug;\n"],"sourceRoot":""}