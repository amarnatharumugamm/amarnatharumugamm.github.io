{"version":3,"sources":["Components/FindNearby/PendingResources.js"],"names":["PendingResources","dispatch","useDispatch","useEffect","resourcependinglist","status","pendinglist","useSelector","payload","useState","show","setShow","id","setId","reason","setReason","handleClose","className","Array","isArray","length","map","item","src","photos","alt","name","mobile","city","resource_type","class","onChange","event","target","value","resourceupdatelist","colspan","style","textAlign","onHide","Header","closeButton","backgroundColor","Title","Body","color","Control","type","placeholder","e","aria-describedby","Footer","variant","onClick"],"mappings":"yLA4IeA,UAnIf,WACE,IAAMC,EAAWC,cACjBC,qBAAU,WACRF,EAASG,YAAoB,CAAEC,OAAQ,eACtC,IACH,IAAIC,EAAcC,aAChB,qBAAGH,oBAA8CI,WANzB,EASFC,oBAAS,GATP,mBASnBC,EATmB,KASbC,EATa,OAUNF,mBAAS,IAVH,mBAUnBG,EAVmB,KAUfC,EAVe,OAWEJ,qBAXF,mBAWnBK,EAXmB,KAWXC,EAXW,KAYpBC,EAAc,kBAAML,GAAQ,IASlC,OACE,yBAAKM,UAAU,OACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,kBACA,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,sCACA,wCACA,sCACA,wCACA,+CACA,sCACA,2CAGJ,+BACGC,MAAMC,QAAQb,IAAgBA,EAAYc,OAAS,EAClDd,EAAYe,KAAI,SAACC,GACf,OACE,4BACE,4BACE,yBACEC,IAAKD,EAAKE,OACVP,UAAU,OACVQ,IAAI,SAELH,EAAKI,MAER,gCAAMJ,EAAKK,OAAX,KACA,gCAAML,EAAKM,KAAX,KACA,gCAAMN,EAAKR,OAAX,KACA,gCAAMQ,EAAKO,cAAX,KACA,gCAAMP,EAAKjB,OAAX,KACA,4BACE,4BACEyB,MAAM,gBACNC,SAAU,SAACC,GACT,OAAQA,EAAMC,OAAOC,OACnB,IAAK,WACHjC,EACEkC,YAAmB,CACjBvB,GAAIU,EAAKV,GAAK,GACdP,OAAQ,cAGZ,MACF,IAAK,WACHQ,EAAMS,EAAKV,GAAK,IA3DzBD,GAAQ,GAgEHqB,EAAMC,OAAOC,MAAQ,kBAGvB,4BAAQA,MAAM,iBAAd,iBAGA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,YAAd,gBAOV,4BACE,wBAAIE,QAAQ,IAAIC,MAAO,CAAEC,UAAW,WAApC,mBAON,kBAAC,IAAD,CAAO5B,KAAMA,EAAM6B,OAAQvB,GACzB,kBAAC,IAAMwB,OAAP,CAAcC,aAAW,EAACJ,MAAO,CAAEK,gBAAiB,SAClD,kBAAC,IAAMC,MAAP,gBAEF,kBAAC,IAAMC,KAAP,CACEP,MAAO,CAAEK,gBAAiB,OAAQG,MAAO,UAEzC,kBAAC,IAAKC,QAAN,CACEC,KAAK,OACLrB,KAAK,SACLsB,YAAY,eACZjB,SAAU,SAACkB,GAAD,OAAOlC,EAAUkC,EAAEhB,OAAOC,QACpCgB,mBAAiB,uBAGrB,kBAAC,IAAMC,OAAP,CACEd,MAAO,CAAEK,gBAAiB,OAAQG,MAAO,UAEzC,kBAAC,IAAD,CAAQO,QAAQ,SAASC,QAtGvB,WAClBpD,EACEkC,YAAmB,CAAEvB,GAAIA,EAAIP,OAAQ,WAAYS,OAAQA,KAE3DE,MAkGgB","file":"static/js/27.53408733.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Switch } from \"react-router-dom\";\nimport {\n  resourcependinglist,\n  resourceupdatelist,\n} from \"../../reduxx/actions/actions\";\n\nfunction PendingResources() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(resourcependinglist({ status: \"pending\" }));\n  }, []);\n  var pendinglist = useSelector(\n    ({ resourcependinglist }) => resourcependinglist.payload\n  );\n\n  const [show, setShow] = useState(false);\n  const [id, setId] = useState(\"\");\n  const [reason, setReason] = useState();\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleClick = () => {\n    dispatch(\n      resourceupdatelist({ id: id, status: \"rejected\", reason: reason })\n    );\n    handleClose();\n  };\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 grid-margin\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\"> Pending List </h4>\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th> Name </th>\n                    <th> Mobile </th>\n                    <th> City </th>\n                    <th> Reason </th>\n                    <th> Resource Type </th>\n                    <th>Status</th>\n                    <th> Actions </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(pendinglist) && pendinglist.length > 0 ? (\n                    pendinglist.map((item) => {\n                      return (\n                        <tr>\n                          <td>\n                            <img\n                              src={item.photos}\n                              className=\"mr-2\"\n                              alt=\"face\"\n                            />\n                            {item.name}\n                          </td>\n                          <td> {item.mobile} </td>\n                          <td> {item.city} </td>\n                          <td> {item.reason} </td>\n                          <td> {item.resource_type} </td>\n                          <td> {item.status} </td>\n                          <td>\n                            <select\n                              class=\"custom-select\"\n                              onChange={(event) => {\n                                switch (event.target.value) {\n                                  case \"approved\":\n                                    dispatch(\n                                      resourceupdatelist({\n                                        id: item.id + \"\",\n                                        status: \"approved\",\n                                      })\n                                    );\n                                    break;\n                                  case \"rejected\":\n                                    setId(item.id + \"\");\n                                    handleShow();\n                                  default:\n                                    break;\n                                }\n                                event.target.value = \"update_status\";\n                              }}\n                            >\n                              <option value=\"update_status\">\n                                Update Status\n                              </option>\n                              <option value=\"approved\">Approved</option>\n                              <option value=\"rejected\">Reject</option>\n                            </select>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colspan=\"7\" style={{ textAlign: \"center\" }}>\n                        No Data Found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n\n                <Modal show={show} onHide={handleClose}>\n                  <Modal.Header closeButton style={{ backgroundColor: \"#fff\" }}>\n                    <Modal.Title>Reason</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body\n                    style={{ backgroundColor: \"#fff\", color: \"black\" }}\n                  >\n                    <Form.Control\n                      type=\"text\"\n                      name=\"reason\"\n                      placeholder=\"Enter reason\"\n                      onChange={(e) => setReason(e.target.value)}\n                      aria-describedby=\"passwordHelpBlock\"\n                    />\n                  </Modal.Body>\n                  <Modal.Footer\n                    style={{ backgroundColor: \"#fff\", color: \"black\" }}\n                  >\n                    <Button variant=\"danger\" onClick={handleClick}>\n                      Reject\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default PendingResources;\n"],"sourceRoot":""}