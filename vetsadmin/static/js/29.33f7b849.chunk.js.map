{"version":3,"sources":["Components/InstantDoctorList.js"],"names":["InstantDoctorList","dispatch","useDispatch","useEffect","instantdoctorlist","InstantList","useSelector","payload","useState","show","setShow","id","setId","reason","setReason","handleClose","className","Array","isArray","length","map","item","src","doctor","photo","alt","name","doc_reg_no","designation","mobile","style","display","justifyContent","ph_verified","sign","createdAt","district","approval_status","class","onChange","event","target","value","approvedoctor","status","colspan","textAlign","onHide","Header","closeButton","backgroundColor","Title","Body","color","Control","type","placeholder","e","aria-describedby","Footer","variant","onClick","review"],"mappings":"yLAuKeA,UAjKf,WACE,IAAMC,EAAWC,cACjBC,qBAAU,WACRF,EAASG,iBACR,IAEH,IAAIC,EAAcC,aAChB,qBAAGF,kBAA0CG,WAPpB,EASHC,oBAAS,GATN,mBASpBC,EAToB,KASdC,EATc,OAUPF,mBAAS,IAVF,mBAUpBG,EAVoB,KAUhBC,EAVgB,OAWCJ,qBAXD,mBAWpBK,EAXoB,KAWZC,EAXY,KAYrBC,EAAc,kBAAML,GAAQ,IAOlC,OACE,yBAAKM,UAAU,OACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,kBACA,yBAAKA,UAAU,oBACb,2BAAOA,UAAU,SACf,+BACE,4BACE,sCACA,8CACA,6CACA,4CACA,mDACA,2CACA,4CACA,0CACA,wCACA,2CAGJ,+BACGC,MAAMC,QAAQb,IAAgBA,EAAYc,OAAS,EAClDd,EAAYe,KAAI,SAACC,GACf,OACE,4BACE,4BACE,yBACEC,IAAKD,EAAKE,OAAOC,MACjBR,UAAU,OACVS,IAAI,SAELJ,EAAKE,OAAOG,MAEf,gCAAML,EAAKE,OAAOI,WAAlB,KACA,gCAAMN,EAAKE,OAAOK,YAAlB,KACA,gCAAMP,EAAKE,OAAOM,OAAlB,KACA,wBACEC,MAAO,CACLC,QAAS,OACTC,eAAgB,WAGU,GAA3BX,EAAKE,OAAOU,YAAuB,KAAO,MAAO,KAEpD,4BACE,yBACEX,IAAKD,EAAKE,OAAOW,KACjBlB,UAAU,OACVS,IAAI,UAGR,gCAAMJ,EAAKE,OAAOY,WAClB,gCAAMd,EAAKE,OAAOa,SAAlB,KACA,4BACE,2BAAOpB,UAAU,+BACdK,EAAKE,OAAOc,kBAGjB,4BACE,4BACEC,MAAM,gBACNC,SAAU,SAACC,GACT,OAAQA,EAAMC,OAAOC,OACnB,IAAK,UACHzC,EACE0C,YAAc,CACZhC,GAAIU,EAAKV,GAAK,GACdiC,OAAQ,aAGZ,MACF,IAAK,UACH3C,EACE0C,YAAc,CACZhC,GAAIU,EAAKV,GAAK,GACdiC,OAAQ,aAGZ,MACF,IAAK,WACHhC,EAAMS,EAAKV,GAAK,IAxFzBD,GAAQ,GA6FH8B,EAAMC,OAAOC,MAAQ,kBAGvB,4BAAQA,MAAM,iBAAd,iBAGA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,YAAd,gBAOV,4BACE,wBAAIG,QAAQ,IAAIf,MAAO,CAAEgB,UAAW,WAApC,mBAON,kBAAC,IAAD,CAAOrC,KAAMA,EAAMsC,OAAQhC,GACzB,kBAAC,IAAMiC,OAAP,CAAcC,aAAW,EAACnB,MAAO,CAAEoB,gBAAiB,SAClD,kBAAC,IAAMC,MAAP,gBAEF,kBAAC,IAAMC,KAAP,CACEtB,MAAO,CAAEoB,gBAAiB,OAAQG,MAAO,UAEzC,kBAAC,IAAKC,QAAN,CACEC,KAAK,OACL7B,KAAK,SACL8B,YAAY,eACZjB,SAAU,SAACkB,GAAD,OAAO3C,EAAU2C,EAAEhB,OAAOC,QACpCgB,mBAAiB,uBAGrB,kBAAC,IAAMC,OAAP,CACE7B,MAAO,CAAEoB,gBAAiB,OAAQG,MAAO,UAEzC,kBAAC,IAAD,CAAQO,QAAQ,SAASC,QApIvB,WAClB5D,EAAS0C,YAAc,CAAEhC,GAAIA,EAAIiC,OAAQ,WAAYkB,OAAQjD,KAC7DE,MAkIgB","file":"static/js/29.33f7b849.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Button, Modal, Form } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Switch } from \"react-router-dom\";\nimport { instantdoctorlist, approvedoctor } from \"../reduxx/actions/actions\";\n\nfunction InstantDoctorList() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(instantdoctorlist());\n  }, []);\n\n  var InstantList = useSelector(\n    ({ instantdoctorlist }) => instantdoctorlist.payload\n  );\n  const [show, setShow] = useState(false);\n  const [id, setId] = useState(\"\");\n  const [reason, setReason] = useState();\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const handleClick = () => {\n    dispatch(approvedoctor({ id: id, status: \"rejected\", review: reason }));\n    handleClose();\n  };\n  return (\n    <div className=\"row\">\n      <div className=\"col-12 grid-margin\">\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h4 className=\"card-title\"> Instant List </h4>\n            <div className=\"table-responsive\">\n              <table className=\"table\">\n                <thead>\n                  <tr>\n                    <th> User </th>\n                    <th> Doctor Regno </th>\n                    <th> Designation </th>\n                    <th>Phone number</th>\n                    <th>Phone number status</th>\n                    <th> Signature </th>\n                    <th> Joined Date</th>\n                    <th> Location </th>\n                    <th> Status </th>\n                    <th> Actions </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Array.isArray(InstantList) && InstantList.length > 0 ? (\n                    InstantList.map((item) => {\n                      return (\n                        <tr>\n                          <td>\n                            <img\n                              src={item.doctor.photo}\n                              className=\"mr-2\"\n                              alt=\"face\"\n                            />\n                            {item.doctor.name}\n                          </td>\n                          <td> {item.doctor.doc_reg_no} </td>\n                          <td> {item.doctor.designation} </td>\n                          <td> {item.doctor.mobile} </td>\n                          <td\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"center\",\n                            }}\n                          >\n                            {item.doctor.ph_verified == false ? \"No\" : \"Yes\"}{\" \"}\n                          </td>\n                          <td>\n                            <img\n                              src={item.doctor.sign}\n                              className=\"mr-2\"\n                              alt=\"face\"\n                            />\n                          </td>\n                          <td> {item.doctor.createdAt}</td>\n                          <td> {item.doctor.district} </td>\n                          <td>\n                            <label className=\"badge badge-gradient-danger\">\n                              {item.doctor.approval_status}\n                            </label>\n                          </td>\n                          <td>\n                            <select\n                              class=\"custom-select\"\n                              onChange={(event) => {\n                                switch (event.target.value) {\n                                  case \"approve\":\n                                    dispatch(\n                                      approvedoctor({\n                                        id: item.id + \"\",\n                                        status: \"approve\",\n                                      })\n                                    );\n                                    break;\n                                  case \"pending\":\n                                    dispatch(\n                                      approvedoctor({\n                                        id: item.id + \"\",\n                                        status: \"pending\",\n                                      })\n                                    );\n                                    break;\n                                  case \"rejected\":\n                                    setId(item.id + \"\");\n                                    handleShow();\n                                  default:\n                                    break;\n                                }\n                                event.target.value = \"update_status\";\n                              }}\n                            >\n                              <option value=\"update_status\">\n                                Update Status\n                              </option>\n                              <option value=\"approve\">Approve</option>\n                              <option value=\"pending\">Pending</option>\n                              <option value=\"rejected\">Reject</option>\n                            </select>\n                          </td>\n                        </tr>\n                      );\n                    })\n                  ) : (\n                    <tr>\n                      <td colspan=\"7\" style={{ textAlign: \"center\" }}>\n                        No Data Found\n                      </td>\n                    </tr>\n                  )}\n                </tbody>\n\n                <Modal show={show} onHide={handleClose}>\n                  <Modal.Header closeButton style={{ backgroundColor: \"#fff\" }}>\n                    <Modal.Title>Reason</Modal.Title>\n                  </Modal.Header>\n                  <Modal.Body\n                    style={{ backgroundColor: \"#fff\", color: \"black\" }}\n                  >\n                    <Form.Control\n                      type=\"text\"\n                      name=\"reason\"\n                      placeholder=\"Enter reason\"\n                      onChange={(e) => setReason(e.target.value)}\n                      aria-describedby=\"passwordHelpBlock\"\n                    />\n                  </Modal.Body>\n                  <Modal.Footer\n                    style={{ backgroundColor: \"#fff\", color: \"black\" }}\n                  >\n                    <Button variant=\"danger\" onClick={handleClick}>\n                      Reject\n                    </Button>\n                  </Modal.Footer>\n                </Modal>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default InstantDoctorList;\n"],"sourceRoot":""}